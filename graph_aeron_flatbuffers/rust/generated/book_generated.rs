// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use crate::common_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod graph {

  use crate::{common_generated::*, InstrumentId, Price, Size, Timestamp};
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_BOOK_UPDATE_TYPE: i16 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_BOOK_UPDATE_TYPE: i16 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_BOOK_UPDATE_TYPE: [BookUpdateType; 2] = [
  BookUpdateType::Update,
  BookUpdateType::Snapshot,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct BookUpdateType(pub i16);
#[allow(non_upper_case_globals)]
impl BookUpdateType {
  pub const Update: Self = Self(0);
  pub const Snapshot: Self = Self(1);

  pub const ENUM_MIN: i16 = 0;
  pub const ENUM_MAX: i16 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Update,
    Self::Snapshot,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Update => Some("Update"),
      Self::Snapshot => Some("Snapshot"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for BookUpdateType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for BookUpdateType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i16>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for BookUpdateType {
    type Output = BookUpdateType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for BookUpdateType {
  type Scalar = i16;
  #[inline]
  fn to_little_endian(self) -> i16 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i16) -> Self {
    let b = i16::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for BookUpdateType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i16::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for BookUpdateType {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_LEVEL_UPDATE_TYPE: i16 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_LEVEL_UPDATE_TYPE: i16 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LEVEL_UPDATE_TYPE: [LevelUpdateType; 4] = [
  LevelUpdateType::New,
  LevelUpdateType::Change,
  LevelUpdateType::Delete,
  LevelUpdateType::Republish,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct LevelUpdateType(pub i16);
#[allow(non_upper_case_globals)]
impl LevelUpdateType {
  pub const New: Self = Self(0);
  pub const Change: Self = Self(1);
  pub const Delete: Self = Self(2);
  pub const Republish: Self = Self(3);

  pub const ENUM_MIN: i16 = 0;
  pub const ENUM_MAX: i16 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::New,
    Self::Change,
    Self::Delete,
    Self::Republish,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::New => Some("New"),
      Self::Change => Some("Change"),
      Self::Delete => Some("Delete"),
      Self::Republish => Some("Republish"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for LevelUpdateType {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for LevelUpdateType {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i16>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for LevelUpdateType {
    type Output = LevelUpdateType;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for LevelUpdateType {
  type Scalar = i16;
  #[inline]
  fn to_little_endian(self) -> i16 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i16) -> Self {
    let b = i16::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for LevelUpdateType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i16::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for LevelUpdateType {}
// struct Level, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Level(pub [u8; 32]);
impl Default for Level { 
  fn default() -> Self { 
    Self([0; 32])
  }
}
impl core::fmt::Debug for Level {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Level")
      .field("price", &self.price())
      .field("size_", &self.size_())
      .field("recent_size", &self.recent_size())
      .field("last_update", &self.last_update())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Level {}
impl<'a> flatbuffers::Follow<'a> for Level {
  type Inner = &'a Level;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Level>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Level {
  type Inner = &'a Level;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Level>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Level {
    type Output = Level;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Level as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Level {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Level {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    price: &Price,
    size_: &Size,
    recent_size: &Size,
    last_update: &Timestamp,
  ) -> Self {
    let mut s = Self([0; 32]);
    s.set_price(price);
    s.set_size_(size_);
    s.set_recent_size(recent_size);
    s.set_last_update(last_update);
    s
  }

  pub fn price(&self) -> &Price {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[0..].as_ptr() as *const Price) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_price(&mut self, x: &Price) {
    self.0[0..0 + 8].copy_from_slice(&x.0)
  }

  pub fn size_(&self) -> &Size {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[8..].as_ptr() as *const Size) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_size_(&mut self, x: &Size) {
    self.0[8..8 + 8].copy_from_slice(&x.0)
  }

  pub fn recent_size(&self) -> &Size {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[16..].as_ptr() as *const Size) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_recent_size(&mut self, x: &Size) {
    self.0[16..16 + 8].copy_from_slice(&x.0)
  }

  pub fn last_update(&self) -> &Timestamp {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[24..].as_ptr() as *const Timestamp) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_last_update(&mut self, x: &Timestamp) {
    self.0[24..24 + 8].copy_from_slice(&x.0)
  }

}

// struct LevelUpdate, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct LevelUpdate(pub [u8; 40]);
impl Default for LevelUpdate { 
  fn default() -> Self { 
    Self([0; 40])
  }
}
impl core::fmt::Debug for LevelUpdate {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("LevelUpdate")
      .field("type_", &self.type_())
      .field("level", &self.level())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for LevelUpdate {}
impl<'a> flatbuffers::Follow<'a> for LevelUpdate {
  type Inner = &'a LevelUpdate;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a LevelUpdate>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a LevelUpdate {
  type Inner = &'a LevelUpdate;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<LevelUpdate>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for LevelUpdate {
    type Output = LevelUpdate;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const LevelUpdate as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for LevelUpdate {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> LevelUpdate {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    type_: LevelUpdateType,
    level: &Level,
  ) -> Self {
    let mut s = Self([0; 40]);
    s.set_type_(type_);
    s.set_level(level);
    s
  }

  pub fn type_(&self) -> LevelUpdateType {
    let mut mem = core::mem::MaybeUninit::<<LevelUpdateType as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<LevelUpdateType as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_type_(&mut self, x: LevelUpdateType) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<LevelUpdateType as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn level(&self) -> &Level {
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid struct in this slot
    unsafe { &*(self.0[8..].as_ptr() as *const Level) }
  }

  #[allow(clippy::identity_op)]
  pub fn set_level(&mut self, x: &Level) {
    self.0[8..8 + 32].copy_from_slice(&x.0)
  }

}

pub enum BookOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Book<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Book<'a> {
  type Inner = Book<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Book<'a> {
  pub const VT_BIDS: flatbuffers::VOffsetT = 4;
  pub const VT_ASKS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Book { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BookArgs<'args>
  ) -> flatbuffers::WIPOffset<Book<'bldr>> {
    let mut builder = BookBuilder::new(_fbb);
    if let Some(x) = args.asks { builder.add_asks(x); }
    if let Some(x) = args.bids { builder.add_bids(x); }
    builder.finish()
  }


  #[inline]
  pub fn bids(&self) -> Option<flatbuffers::Vector<'a, Level>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Level>>>(Book::VT_BIDS, None)}
  }
  #[inline]
  pub fn asks(&self) -> Option<flatbuffers::Vector<'a, Level>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Level>>>(Book::VT_ASKS, None)}
  }
}

impl flatbuffers::Verifiable for Book<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Level>>>("bids", Self::VT_BIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Level>>>("asks", Self::VT_ASKS, false)?
     .finish();
    Ok(())
  }
}
pub struct BookArgs<'a> {
    pub bids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Level>>>,
    pub asks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Level>>>,
}
impl<'a> Default for BookArgs<'a> {
  #[inline]
  fn default() -> Self {
    BookArgs {
      bids: None,
      asks: None,
    }
  }
}

pub struct BookBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BookBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_bids(&mut self, bids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Level>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Book::VT_BIDS, bids);
  }
  #[inline]
  pub fn add_asks(&mut self, asks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Level>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Book::VT_ASKS, asks);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BookBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BookBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Book<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Book<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Book");
      ds.field("bids", &self.bids());
      ds.field("asks", &self.asks());
      ds.finish()
  }
}
pub enum BookUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BookUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BookUpdate<'a> {
  type Inner = BookUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BookUpdate<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_TIMESTAMP_EXCHANGE: flatbuffers::VOffsetT = 6;
  pub const VT_ID: flatbuffers::VOffsetT = 8;
  pub const VT_BIDS: flatbuffers::VOffsetT = 10;
  pub const VT_ASKS: flatbuffers::VOffsetT = 12;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BookUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BookUpdateArgs<'args>
  ) -> flatbuffers::WIPOffset<BookUpdate<'bldr>> {
    let mut builder = BookUpdateBuilder::new(_fbb);
    if let Some(x) = args.asks { builder.add_asks(x); }
    if let Some(x) = args.bids { builder.add_bids(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    if let Some(x) = args.timestamp_exchange { builder.add_timestamp_exchange(x); }
    if let Some(x) = args.timestamp { builder.add_timestamp(x); }
    builder.add_type_(args.type_);
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> Option<&'a Timestamp> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Timestamp>(BookUpdate::VT_TIMESTAMP, None)}
  }
  #[inline]
  pub fn timestamp_exchange(&self) -> Option<&'a Timestamp> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Timestamp>(BookUpdate::VT_TIMESTAMP_EXCHANGE, None)}
  }
  #[inline]
  pub fn id(&self) -> Option<InstrumentId<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<InstrumentId>>(BookUpdate::VT_ID, None)}
  }
  #[inline]
  pub fn bids(&self) -> Option<flatbuffers::Vector<'a, Level>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Level>>>(BookUpdate::VT_BIDS, None)}
  }
  #[inline]
  pub fn asks(&self) -> Option<flatbuffers::Vector<'a, Level>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Level>>>(BookUpdate::VT_ASKS, None)}
  }
  #[inline]
  pub fn type_(&self) -> BookUpdateType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BookUpdateType>(BookUpdate::VT_TYPE_, Some(BookUpdateType::Update)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BookUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Timestamp>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<Timestamp>("timestamp_exchange", Self::VT_TIMESTAMP_EXCHANGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<InstrumentId>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Level>>>("bids", Self::VT_BIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Level>>>("asks", Self::VT_ASKS, false)?
     .visit_field::<BookUpdateType>("type_", Self::VT_TYPE_, false)?
     .finish();
    Ok(())
  }
}
pub struct BookUpdateArgs<'a> {
    pub timestamp: Option<&'a Timestamp>,
    pub timestamp_exchange: Option<&'a Timestamp>,
    pub id: Option<flatbuffers::WIPOffset<InstrumentId<'a>>>,
    pub bids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Level>>>,
    pub asks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Level>>>,
    pub type_: BookUpdateType,
}
impl<'a> Default for BookUpdateArgs<'a> {
  #[inline]
  fn default() -> Self {
    BookUpdateArgs {
      timestamp: None,
      timestamp_exchange: None,
      id: None,
      bids: None,
      asks: None,
      type_: BookUpdateType::Update,
    }
  }
}

pub struct BookUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BookUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: &Timestamp) {
    self.fbb_.push_slot_always::<&Timestamp>(BookUpdate::VT_TIMESTAMP, timestamp);
  }
  #[inline]
  pub fn add_timestamp_exchange(&mut self, timestamp_exchange: &Timestamp) {
    self.fbb_.push_slot_always::<&Timestamp>(BookUpdate::VT_TIMESTAMP_EXCHANGE, timestamp_exchange);
  }
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<InstrumentId<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<InstrumentId>>(BookUpdate::VT_ID, id);
  }
  #[inline]
  pub fn add_bids(&mut self, bids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Level>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BookUpdate::VT_BIDS, bids);
  }
  #[inline]
  pub fn add_asks(&mut self, asks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Level>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BookUpdate::VT_ASKS, asks);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: BookUpdateType) {
    self.fbb_.push_slot::<BookUpdateType>(BookUpdate::VT_TYPE_, type_, BookUpdateType::Update);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BookUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BookUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BookUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BookUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BookUpdate");
      ds.field("timestamp", &self.timestamp());
      ds.field("timestamp_exchange", &self.timestamp_exchange());
      ds.field("id", &self.id());
      ds.field("bids", &self.bids());
      ds.field("asks", &self.asks());
      ds.field("type_", &self.type_());
      ds.finish()
  }
}
pub enum FullBookUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FullBookUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FullBookUpdate<'a> {
  type Inner = FullBookUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FullBookUpdate<'a> {
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
  pub const VT_TIMESTAMP_EXCHANGE: flatbuffers::VOffsetT = 6;
  pub const VT_ID: flatbuffers::VOffsetT = 8;
  pub const VT_BIDS: flatbuffers::VOffsetT = 10;
  pub const VT_ASKS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FullBookUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FullBookUpdateArgs<'args>
  ) -> flatbuffers::WIPOffset<FullBookUpdate<'bldr>> {
    let mut builder = FullBookUpdateBuilder::new(_fbb);
    if let Some(x) = args.asks { builder.add_asks(x); }
    if let Some(x) = args.bids { builder.add_bids(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    if let Some(x) = args.timestamp_exchange { builder.add_timestamp_exchange(x); }
    if let Some(x) = args.timestamp { builder.add_timestamp(x); }
    builder.finish()
  }


  #[inline]
  pub fn timestamp(&self) -> Option<&'a Timestamp> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Timestamp>(FullBookUpdate::VT_TIMESTAMP, None)}
  }
  #[inline]
  pub fn timestamp_exchange(&self) -> Option<&'a Timestamp> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Timestamp>(FullBookUpdate::VT_TIMESTAMP_EXCHANGE, None)}
  }
  #[inline]
  pub fn id(&self) -> Option<InstrumentId<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<InstrumentId>>(FullBookUpdate::VT_ID, None)}
  }
  #[inline]
  pub fn bids(&self) -> Option<flatbuffers::Vector<'a, Level>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Level>>>(FullBookUpdate::VT_BIDS, None)}
  }
  #[inline]
  pub fn asks(&self) -> Option<flatbuffers::Vector<'a, Level>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Level>>>(FullBookUpdate::VT_ASKS, None)}
  }
}

impl flatbuffers::Verifiable for FullBookUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Timestamp>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<Timestamp>("timestamp_exchange", Self::VT_TIMESTAMP_EXCHANGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<InstrumentId>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Level>>>("bids", Self::VT_BIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Level>>>("asks", Self::VT_ASKS, false)?
     .finish();
    Ok(())
  }
}
pub struct FullBookUpdateArgs<'a> {
    pub timestamp: Option<&'a Timestamp>,
    pub timestamp_exchange: Option<&'a Timestamp>,
    pub id: Option<flatbuffers::WIPOffset<InstrumentId<'a>>>,
    pub bids: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Level>>>,
    pub asks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Level>>>,
}
impl<'a> Default for FullBookUpdateArgs<'a> {
  #[inline]
  fn default() -> Self {
    FullBookUpdateArgs {
      timestamp: None,
      timestamp_exchange: None,
      id: None,
      bids: None,
      asks: None,
    }
  }
}

pub struct FullBookUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FullBookUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: &Timestamp) {
    self.fbb_.push_slot_always::<&Timestamp>(FullBookUpdate::VT_TIMESTAMP, timestamp);
  }
  #[inline]
  pub fn add_timestamp_exchange(&mut self, timestamp_exchange: &Timestamp) {
    self.fbb_.push_slot_always::<&Timestamp>(FullBookUpdate::VT_TIMESTAMP_EXCHANGE, timestamp_exchange);
  }
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<InstrumentId<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<InstrumentId>>(FullBookUpdate::VT_ID, id);
  }
  #[inline]
  pub fn add_bids(&mut self, bids: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Level>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FullBookUpdate::VT_BIDS, bids);
  }
  #[inline]
  pub fn add_asks(&mut self, asks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Level>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FullBookUpdate::VT_ASKS, asks);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FullBookUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FullBookUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FullBookUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FullBookUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FullBookUpdate");
      ds.field("timestamp", &self.timestamp());
      ds.field("timestamp_exchange", &self.timestamp_exchange());
      ds.field("id", &self.id());
      ds.field("bids", &self.bids());
      ds.field("asks", &self.asks());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `BookUpdate`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_book_update_unchecked`.
pub fn root_as_book_update(buf: &[u8]) -> Result<BookUpdate, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<BookUpdate>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `BookUpdate` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_book_update_unchecked`.
pub fn size_prefixed_root_as_book_update(buf: &[u8]) -> Result<BookUpdate, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<BookUpdate>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `BookUpdate` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_book_update_unchecked`.
pub fn root_as_book_update_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BookUpdate<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<BookUpdate<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `BookUpdate` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_book_update_unchecked`.
pub fn size_prefixed_root_as_book_update_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BookUpdate<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<BookUpdate<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a BookUpdate and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `BookUpdate`.
pub unsafe fn root_as_book_update_unchecked(buf: &[u8]) -> BookUpdate {
  flatbuffers::root_unchecked::<BookUpdate>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed BookUpdate and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `BookUpdate`.
pub unsafe fn size_prefixed_root_as_book_update_unchecked(buf: &[u8]) -> BookUpdate {
  flatbuffers::size_prefixed_root_unchecked::<BookUpdate>(buf)
}
#[inline]
pub fn finish_book_update_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<BookUpdate<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_book_update_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<BookUpdate<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Graph

