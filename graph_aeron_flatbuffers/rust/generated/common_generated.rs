// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod graph {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CURRENCY: i16 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CURRENCY: i16 = 9;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CURRENCY: [Currency; 10] = [
  Currency::USD,
  Currency::USDC,
  Currency::USDT,
  Currency::BTC,
  Currency::ETH,
  Currency::SOL,
  Currency::XRP,
  Currency::MATIC,
  Currency::EUR,
  Currency::GBP,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Currency(pub i16);
#[allow(non_upper_case_globals)]
impl Currency {
  pub const USD: Self = Self(0);
  pub const USDC: Self = Self(1);
  pub const USDT: Self = Self(2);
  pub const BTC: Self = Self(3);
  pub const ETH: Self = Self(4);
  pub const SOL: Self = Self(5);
  pub const XRP: Self = Self(6);
  pub const MATIC: Self = Self(7);
  pub const EUR: Self = Self(8);
  pub const GBP: Self = Self(9);

  pub const ENUM_MIN: i16 = 0;
  pub const ENUM_MAX: i16 = 9;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::USD,
    Self::USDC,
    Self::USDT,
    Self::BTC,
    Self::ETH,
    Self::SOL,
    Self::XRP,
    Self::MATIC,
    Self::EUR,
    Self::GBP,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::USD => Some("USD"),
      Self::USDC => Some("USDC"),
      Self::USDT => Some("USDT"),
      Self::BTC => Some("BTC"),
      Self::ETH => Some("ETH"),
      Self::SOL => Some("SOL"),
      Self::XRP => Some("XRP"),
      Self::MATIC => Some("MATIC"),
      Self::EUR => Some("EUR"),
      Self::GBP => Some("GBP"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Currency {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Currency {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i16>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Currency {
    type Output = Currency;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Currency {
  type Scalar = i16;
  #[inline]
  fn to_little_endian(self) -> i16 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i16) -> Self {
    let b = i16::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Currency {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i16::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Currency {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EXCHANGE: i16 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EXCHANGE: i16 = 13;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EXCHANGE: [Exchange; 14] = [
  Exchange::Internal,
  Exchange::Binance,
  Exchange::Bitstamp,
  Exchange::Bitfinex,
  Exchange::Bittrex,
  Exchange::Coinbase,
  Exchange::Deribit,
  Exchange::Gateio,
  Exchange::Gemini,
  Exchange::Itbit,
  Exchange::Kraken,
  Exchange::Lmax,
  Exchange::Okcoin,
  Exchange::Okx,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Exchange(pub i16);
#[allow(non_upper_case_globals)]
impl Exchange {
  pub const Internal: Self = Self(0);
  pub const Binance: Self = Self(1);
  pub const Bitstamp: Self = Self(2);
  pub const Bitfinex: Self = Self(3);
  pub const Bittrex: Self = Self(4);
  pub const Coinbase: Self = Self(5);
  pub const Deribit: Self = Self(6);
  pub const Gateio: Self = Self(7);
  pub const Gemini: Self = Self(8);
  pub const Itbit: Self = Self(9);
  pub const Kraken: Self = Self(10);
  pub const Lmax: Self = Self(11);
  pub const Okcoin: Self = Self(12);
  pub const Okx: Self = Self(13);

  pub const ENUM_MIN: i16 = 0;
  pub const ENUM_MAX: i16 = 13;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Internal,
    Self::Binance,
    Self::Bitstamp,
    Self::Bitfinex,
    Self::Bittrex,
    Self::Coinbase,
    Self::Deribit,
    Self::Gateio,
    Self::Gemini,
    Self::Itbit,
    Self::Kraken,
    Self::Lmax,
    Self::Okcoin,
    Self::Okx,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Internal => Some("Internal"),
      Self::Binance => Some("Binance"),
      Self::Bitstamp => Some("Bitstamp"),
      Self::Bitfinex => Some("Bitfinex"),
      Self::Bittrex => Some("Bittrex"),
      Self::Coinbase => Some("Coinbase"),
      Self::Deribit => Some("Deribit"),
      Self::Gateio => Some("Gateio"),
      Self::Gemini => Some("Gemini"),
      Self::Itbit => Some("Itbit"),
      Self::Kraken => Some("Kraken"),
      Self::Lmax => Some("Lmax"),
      Self::Okcoin => Some("Okcoin"),
      Self::Okx => Some("Okx"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Exchange {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Exchange {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i16>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Exchange {
    type Output = Exchange;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i16>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Exchange {
  type Scalar = i16;
  #[inline]
  fn to_little_endian(self) -> i16 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i16) -> Self {
    let b = i16::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Exchange {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i16::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Exchange {}
// struct Price, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Price(pub [u8; 8]);
impl Default for Price { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for Price {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Price")
      .field("value", &self.value())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Price {}
impl<'a> flatbuffers::Follow<'a> for Price {
  type Inner = &'a Price;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Price>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Price {
  type Inner = &'a Price;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Price>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Price {
    type Output = Price;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Price as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Price {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Price {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    value: f64,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_value(value);
    s
  }

  pub fn value(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_value(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Size, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Size(pub [u8; 8]);
impl Default for Size { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for Size {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Size")
      .field("value", &self.value())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Size {}
impl<'a> flatbuffers::Follow<'a> for Size {
  type Inner = &'a Size;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Size>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Size {
  type Inner = &'a Size;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Size>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Size {
    type Output = Size;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Size as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Size {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Size {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    value: f64,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_value(value);
    s
  }

  pub fn value(&self) -> f64 {
    let mut mem = core::mem::MaybeUninit::<<f64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_value(&mut self, x: f64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Timestamp, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Timestamp(pub [u8; 8]);
impl Default for Timestamp { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for Timestamp {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Timestamp")
      .field("value", &self.value())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Timestamp {}
impl<'a> flatbuffers::Follow<'a> for Timestamp {
  type Inner = &'a Timestamp;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Timestamp>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Timestamp {
  type Inner = &'a Timestamp;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Timestamp>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Timestamp {
    type Output = Timestamp;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Timestamp as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Timestamp {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Timestamp {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    value: i64,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_value(value);
    s
  }

  pub fn value(&self) -> i64 {
    let mut mem = core::mem::MaybeUninit::<<i64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_value(&mut self, x: i64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<i64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum InstrumentIdOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct InstrumentId<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for InstrumentId<'a> {
  type Inner = InstrumentId<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> InstrumentId<'a> {
  pub const VT_EXCHANGE: flatbuffers::VOffsetT = 4;
  pub const VT_ID: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    InstrumentId { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args InstrumentIdArgs<'args>
  ) -> flatbuffers::WIPOffset<InstrumentId<'bldr>> {
    let mut builder = InstrumentIdBuilder::new(_fbb);
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_exchange(args.exchange);
    builder.finish()
  }


  #[inline]
  pub fn exchange(&self) -> Exchange {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Exchange>(InstrumentId::VT_EXCHANGE, Some(Exchange::Internal)).unwrap()}
  }
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(InstrumentId::VT_ID, None)}
  }
}

impl flatbuffers::Verifiable for InstrumentId<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<Exchange>("exchange", Self::VT_EXCHANGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct InstrumentIdArgs<'a> {
    pub exchange: Exchange,
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for InstrumentIdArgs<'a> {
  #[inline]
  fn default() -> Self {
    InstrumentIdArgs {
      exchange: Exchange::Internal,
      id: None,
    }
  }
}

pub struct InstrumentIdBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> InstrumentIdBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_exchange(&mut self, exchange: Exchange) {
    self.fbb_.push_slot::<Exchange>(InstrumentId::VT_EXCHANGE, exchange, Exchange::Internal);
  }
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(InstrumentId::VT_ID, id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> InstrumentIdBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    InstrumentIdBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<InstrumentId<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for InstrumentId<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("InstrumentId");
      ds.field("exchange", &self.exchange());
      ds.field("id", &self.id());
      ds.finish()
  }
}
}  // pub mod Graph

