// <auto-generated>
//     Generated SBE (Simple Binary Encoding) message codec
// </auto-generated>

#pragma warning disable 1591 // disable warning on missing comments
using System;
using System.Text;
using Org.SbeTool.Sbe.Dll;

namespace Extension
{
    public sealed partial class Booster
    {
        public const ushort SbeSchemaId = (ushort)1;
        public const ushort SbeSchemaVersion = (ushort)1;
        public const int Size = 2;

        private DirectBuffer _buffer;
        private int _offset;
        private int _actingVersion;

        public void Wrap(DirectBuffer buffer, int offset, int actingVersion)
        {
            _offset = offset;
            _actingVersion = actingVersion;
            _buffer = buffer;
        }


        public BoostType BoostType
        {
            get
            {
                return (BoostType)_buffer.CharGet(_offset + 0);
            }
            set
            {
                _buffer.CharPut(_offset + 0, (byte)value);
            }
        }


        public const byte HorsePowerNullValue = (byte)255;
        public const byte HorsePowerMinValue = (byte)0;
        public const byte HorsePowerMaxValue = (byte)254;

        public byte HorsePower
        {
            get
            {
                return _buffer.Uint8Get(_offset + 1);
            }
            set
            {
                _buffer.Uint8Put(_offset + 1, value);
            }
        }


        public override string ToString()
        {
            var sb = new StringBuilder(100);
            this.BuildString(sb);
            return sb.ToString();
        }

        internal void BuildString(StringBuilder builder)
        {
            if (_buffer == null)
            {
                return;
            }

            builder.Append('(');
            builder.Append("BoostType=");
            builder.Append(this.BoostType);
            builder.Append('|');
            builder.Append("HorsePower=");
            builder.Append(this.HorsePower);
            builder.Append(')');

        }
    }
}
