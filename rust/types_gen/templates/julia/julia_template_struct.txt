{%- block struct_def -%}
{% if struct_def.is_mutable %}mutable {% endif %}struct {{ struct_def.struct_name }}{{ Self::format_generics(struct_def.generic_args) }}
{%- for field in struct_def.field_positions.original_order %}
    _{{ field.field_name }}::{{ Self::format_var_type(field.field_type) }}
{%- endfor %}

    {{ struct_def.struct_name }}(
        {%- for field in struct_def.field_positions.original_order %}
        {{ field.field_name }}::{{ Self::format_var_type(field.field_type) }},
        {%- endfor %}
    ) = new(
            {%- for field in struct_def.field_positions.original_order %}
            {{ field.field_name }},
            {%- endfor %}
        )
end
function serialize(self::{{ struct_def.struct_name }}, buf::Bytes, start_pos::Int64) 
    offsets = []
    pos = start_pos + sizeof(offsets)

{%- for field in struct_def.field_positions.original_order %}
    pos = serialize(buf, pos, self._{{ field.field_name }})
{%- endfor %}
    serialize(buffer, start_pos, offsets)
    return pos
end

function deserialize(buf::Bytes, pos::Ref{Int}, ::Type{T}) where { T<:{{ struct_def.struct_name }} }
    offsets = []
    pos[] += sizeof(offsets)
    {{ struct_def.struct_name }}(
{%- for field in struct_def.field_positions.original_order %}
        deserialize(buf, pos, {{  Self::format_var_type(field.field_type) }}), # Deserialize {{ field.field_name }} 
{%- endfor %}
    )
end

{%- for field in struct_def.field_positions.original_order %}
{{ field.field_name }}(self::{{ struct_def.struct_name }}) = self._{{ field.field_name }}
{%- if struct_def.is_mutable %} 
{{ field.field_name }}!(self::{{ struct_def.struct_name }}, value::{{ Self::format_var_type(field.field_type) }}) = self._{{ field.field_name }} = value
{%- endif -%}
{%- endfor %}

{%- endblock -%}

{%- block struct_buffer_def -%}
struct {{ struct_def.struct_name }}_Buffer{{ Self::format_generics(struct_def.generic_args) }}
    buffer::Vector{UInt8}
    start_pos::UInt64
end

# Offset Calculations
const {{ struct_def.struct_name }}_OFFSET_COUNT = 0
const {{ struct_def.struct_name }}_START_OFFSET = sizeof(Int) * {{ struct_def.struct_name }}_OFFSET_COUNT

{%- for field in struct_def.field_positions.original_order %}
const {{ struct_def.struct_name }}_{{ field.field_name }}_OFFSET = 0
{%- endfor %}

{%- for field in struct_def.field_positions.original_order %}

function get_{{ field.field_name }}(self::{{ struct_def.struct_name }}_Buffer)
    return self._{{ field.field_name }}
end
{%- endfor %}

{%- endblock -%}
